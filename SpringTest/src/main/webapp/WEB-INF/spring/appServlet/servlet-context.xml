<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- 스프링에서 웹페이지 관련된 bean(객체)과 설정을 넣어놓는 파일 -->
	<!-- 언제 생성됨? 톰캣 서버가 실행되고, DispatcherServlet이 톰캣의 컨테이너에 생성되어 들어갈 때 설정을 읽는다. -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- 스프링이 제공하는 어노테이션을 활성화한다. 없으면 안 됨. -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- location으로 요청이 오면 mapping에 해당하는 경로로 이동시킨다. -->
	<!-- 정적자원(css, js, 이미지) 등을 제공하는 경로 -->
	<!-- localhost:8080/ezen/resources/a.css 요청하면 webapp/resources/a.css를 찾아서 응답한다. -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- 
		역할: 스프링의 컨트롤러(@Controller) 메소드에서 문자열을 반환하면 jsp를 찾아가서 포워딩하려고 한다.
		HomeController.java의 home()메소드가 "home"값을 반환하면 "/WEB-INF/views/home.jsp"로 포워딩. 
		ViewResolver가 해당 문자열 "앞"에 "/WEB-INF/views/"를 붙여주고(setPrefix()메소드),
					  해당 문자열 "뒤"에 ".jsp"를 붙여서(setSuffix()메소드) jsp를 찾아갈 수 있게 해준다.
	 -->
	<!-- 
		InternalResourceViewResolver internalResourceViewResolver = new InternalResourceViewResolver();
		internalResourceViewResolver.setPrefix("/WEB-INF/views/");
		internalResourceViewResolver.setSuffix(".jsp");
	 -->
	<!-- IOC(제어의 역전): bean태그를 이용하면 xml문법을 이용해 스프링에게 객체 생성을 맡길 수 있다. -->
	<!-- 스프링이 생성한 객체는 IOC컨테이너라는 공간(메모리)에 들어간다. -->
	
	<context:component-scan base-package="com.example.ezen" />
	<!-- base-package패키지 안의 클래스들 중, @Component라는 어노테이션이 달려 있는 모든 클래스를 찾아 bean으로 등록하고, IOC컨테이너에 집어넣는다. -->
</beans:beans>
